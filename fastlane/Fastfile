fastlane_version "2.54.4"

default_platform :ios

# define some variables
name = "FastlaneExample"
xcworkspacepath = "platforms/ios/" + name + ".xcworkspace"
xcodeprojpath = "platforms/ios/" + name + ".xcodeproj"
team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
keystore_path = '../Dropbox/zaehlerstand.keystore'
keystore_alias = 'Zaehlerstand'
keystore_password = ENV["KEYSTORE_PASSWORD"]

before_all do
  #ensure_git_status_clean
end

lane :cleanup do |options|
  artifacts = []
  # TODO Add IONIC env variables when implemented
  artifacts << ENV['CORDOVA_IOS_RELEASE_BUILD_PATH']
  artifacts << ENV['CORDOVA_ANDROID_RELEASE_BUILD_PATH']
  artifacts << lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  artifacts << lane_context[SharedValues::IPA_OUTPUT_PATH]
  artifacts.compact! # remove nils
  #UI.verbose(artifacts)
  copy_artifacts(
    target_path: "artifacts/" + lane_context[SharedValues::LANE_NAME],
    artifacts: artifacts,
    keep_original: false
  )

  # create git branch, commit everything, switch back
  t = Time.now
  datetime = t.strftime("%Y%m%d_%H%M%S")
  lane = lane_context[SharedValues::LANE_NAME]
  old_branch = git_branch
  branch = datetime + "_" + lane.tr(" ", "_")
  sh("git checkout -b " + branch)
  sh("git add -A && git commit -m \"fastlane " + lane + "\"")
  sh("git checkout " + old_branch)

  # Reset the git repo to a clean state, but leave our artifacts in place
  #reset_git_repo(
  #  exclude: ['artifacts', 'node_modules', 'platforms', 'plugins', 'www'] #,
    #skip_clean: true
  #)
end

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  lane :upgrade_xcode_project do
    upgrade_super_old_xcode_project(
      path: xcodeprojpath,
      team_id: team_id,
      use_automatic_signing: true
    )
  end

  desc "Build Debug Debug Ionic"
  lane :build_debug_debug_ionic do
    ionic(
      platform: 'ios',
      prod: false,
      release: false,
      type: 'development'
    )
    cleanup
  end


  desc "Build Ionic"
  lane :build_ionic do |options|
    release = options[:release] || false
    if release
      match(type: 'appstore')
    end
    ionic(
      platform: 'ios',
      prod: true,
      release: release,
      type: (release ? 'app-store' : 'development')
    )
    #cleanup
  end


  desc "Build Debug Ionic"
  lane :build_debug_ionic do
    ionic(
      platform: 'ios',
      prod: true,
      release: false,
      type: 'development'
    )
    cleanup
  end

  desc "Build Release Ionic"
  lane :build_release_ionic do
    match(type: 'appstore')
    ionic(
      platform: 'ios',
      prod: true,
      release: true
    )
    cleanup
  end


  desc "Build Debug Cordova"
  lane :build_debug_cordova do
    cordova(
      platform: 'ios',
      release: false,
      type: 'development'
    )
    cleanup
  end

  desc "Build Release Cordova"
  lane :build_release_cordova do
    match(type: 'appstore')
    cordova(
      platform: 'ios',
      release: true
    )
    cleanup
  end


  desc "Build Debug Native"
  lane :build_debug_native do
    upgrade_xcode_project
    match(type: 'development')
    gym(
      configuration: 'Debug',
      workspace: xcworkspacepath,
      scheme: name,
      export_method: 'development'
    )
    cleanup
  end

  desc "Build Release Native"
  lane :build_release_native do
    upgrade_xcode_project
    match(type: 'appstore')
    gym(
      configuration: 'Release',
      workspace: xcworkspacepath,
      scheme: name,
      codesigning_identity: 'iPhone Developer'
    )
    cleanup
  end


  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
    gym # Build your app - more options available
    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    gym # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Build Debug Debug Ionic"
  lane :build_debug_debug_ionic do
    ionic(
      platform: 'android',
      prod: false,
      release: false
    )
    cleanup
  end


  desc "Build Debug Ionic"
  lane :build_debug_ionic do
    ionic(
      platform: 'android',
      prod: true,
      release: false
    )
    cleanup
  end

  desc "Build Release Ionic"
  lane :build_release_ionic do
    ionic(
      platform: 'android',
      prod: true,
      release: true,

      keystore_path: keystore_path,
      keystore_password: keystore_password,
      keystore_alias: keystore_alias,
      key_password: keystore_password
    )
    cleanup
  end


  desc "Build Debug Cordova"
  lane :build_debug_cordova do
    cordova(
      platform: 'android',
      release: false
    )
    cleanup
  end

  desc "Build Release Cordova"
  lane :build_release_cordova do
    cordova(
      platform: 'android',
      release: true,

      keystore_path: keystore_path,
      keystore_password: keystore_password,
      keystore_alias: keystore_alias,
      key_password: keystore_password
    )
    cleanup
  end


  desc "Build Debug Native"
  lane :build_debug_native do
    gradle(
      task: 'assemble',
      build_type: 'Debug',
      project_dir: 'platforms/android'
    )
    cleanup
  end

  desc "Build Release Native"
  lane :build_release_native do
    gradle(
      task: 'assemble',
      build_type: 'Release',
      project_dir: 'platforms/android',

      properties: {
        "android.injected.signing.store.file" => keystore_path,
        "android.injected.signing.store.password" => keystore_password,
        "android.injected.signing.key.alias" => keystore_alias,
        "android.injected.signing.key.password" => keystore_password,
      }
    )
    cleanup
  end


  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "assembleRelease")
    crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "assembleRelease")
    supply
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
